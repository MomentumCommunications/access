/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignUpSplatRouteImport } from './routes/sign-up.$'
import { Route as SignInSplatRouteImport } from './routes/sign-in.$'
import { Route as AppSearchRouteImport } from './routes/_app.search'
import { Route as AppHomeRouteImport } from './routes/_app.home'
import { Route as AppChannelIndexRouteImport } from './routes/_app.channel/index'
import { Route as AppDmDmIdRouteImport } from './routes/_app.dm/$dmId'
import { Route as AppChannelChannelIdRouteImport } from './routes/_app.channel/$channelId'
import { Route as AppChannelGeneralIndexRouteImport } from './routes/_app.channel/general/index'

const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpSplatRoute = SignUpSplatRouteImport.update({
  id: '/sign-up/$',
  path: '/sign-up/$',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInSplatRoute = SignInSplatRouteImport.update({
  id: '/sign-in/$',
  path: '/sign-in/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSearchRoute = AppSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AppRoute,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)
const AppChannelIndexRoute = AppChannelIndexRouteImport.update({
  id: '/channel/',
  path: '/channel/',
  getParentRoute: () => AppRoute,
} as any)
const AppDmDmIdRoute = AppDmDmIdRouteImport.update({
  id: '/dm/$dmId',
  path: '/dm/$dmId',
  getParentRoute: () => AppRoute,
} as any)
const AppChannelChannelIdRoute = AppChannelChannelIdRouteImport.update({
  id: '/channel/$channelId',
  path: '/channel/$channelId',
  getParentRoute: () => AppRoute,
} as any)
const AppChannelGeneralIndexRoute = AppChannelGeneralIndexRouteImport.update({
  id: '/channel/general/',
  path: '/channel/general/',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/channel/$channelId': typeof AppChannelChannelIdRoute
  '/dm/$dmId': typeof AppDmDmIdRoute
  '/channel': typeof AppChannelIndexRoute
  '/channel/general': typeof AppChannelGeneralIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof AppHomeRoute
  '/search': typeof AppSearchRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/channel/$channelId': typeof AppChannelChannelIdRoute
  '/dm/$dmId': typeof AppDmDmIdRoute
  '/channel': typeof AppChannelIndexRoute
  '/channel/general': typeof AppChannelGeneralIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_app/home': typeof AppHomeRoute
  '/_app/search': typeof AppSearchRoute
  '/sign-in/$': typeof SignInSplatRoute
  '/sign-up/$': typeof SignUpSplatRoute
  '/_app/channel/$channelId': typeof AppChannelChannelIdRoute
  '/_app/dm/$dmId': typeof AppDmDmIdRoute
  '/_app/channel/': typeof AppChannelIndexRoute
  '/_app/channel/general/': typeof AppChannelGeneralIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/search'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/channel/$channelId'
    | '/dm/$dmId'
    | '/channel'
    | '/channel/general'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/search'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/channel/$channelId'
    | '/dm/$dmId'
    | '/channel'
    | '/channel/general'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_app/home'
    | '/_app/search'
    | '/sign-in/$'
    | '/sign-up/$'
    | '/_app/channel/$channelId'
    | '/_app/dm/$dmId'
    | '/_app/channel/'
    | '/_app/channel/general/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  SignInSplatRoute: typeof SignInSplatRoute
  SignUpSplatRoute: typeof SignUpSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up/$': {
      id: '/sign-up/$'
      path: '/sign-up/$'
      fullPath: '/sign-up/$'
      preLoaderRoute: typeof SignUpSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in/$': {
      id: '/sign-in/$'
      path: '/sign-in/$'
      fullPath: '/sign-in/$'
      preLoaderRoute: typeof SignInSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/search': {
      id: '/_app/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AppSearchRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/home': {
      id: '/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/channel/': {
      id: '/_app/channel/'
      path: '/channel'
      fullPath: '/channel'
      preLoaderRoute: typeof AppChannelIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/dm/$dmId': {
      id: '/_app/dm/$dmId'
      path: '/dm/$dmId'
      fullPath: '/dm/$dmId'
      preLoaderRoute: typeof AppDmDmIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/channel/$channelId': {
      id: '/_app/channel/$channelId'
      path: '/channel/$channelId'
      fullPath: '/channel/$channelId'
      preLoaderRoute: typeof AppChannelChannelIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/channel/general/': {
      id: '/_app/channel/general/'
      path: '/channel/general'
      fullPath: '/channel/general'
      preLoaderRoute: typeof AppChannelGeneralIndexRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppSearchRoute: typeof AppSearchRoute
  AppChannelChannelIdRoute: typeof AppChannelChannelIdRoute
  AppDmDmIdRoute: typeof AppDmDmIdRoute
  AppChannelIndexRoute: typeof AppChannelIndexRoute
  AppChannelGeneralIndexRoute: typeof AppChannelGeneralIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppSearchRoute: AppSearchRoute,
  AppChannelChannelIdRoute: AppChannelChannelIdRoute,
  AppDmDmIdRoute: AppDmDmIdRoute,
  AppChannelIndexRoute: AppChannelIndexRoute,
  AppChannelGeneralIndexRoute: AppChannelGeneralIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  SignInSplatRoute: SignInSplatRoute,
  SignUpSplatRoute: SignUpSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
